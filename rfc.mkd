## Standards for Interoperable Bioinformatics Container Interfaces (SIBCI)

### Version: 0.8

## Introduction

The purpose of this document is provide a detailed specification for developers
to write standardised bioinformatics containers. The goal of this document is
to define a standard whereby bioinformatics software containers of the same
type are interoperable and therefore can used interchangeably. The audience of
this document are bioinformaticians and developers writing bioinformatics
software shared using Linux containers. This document will describe the
interface that MUST be provided to a running container and that a developer of
the bioinformatics container MUST write their software against.

The scope of this document is bioinformatics software packaged using Linux
containers. Bioinformatics software in a Linux container can be shared and
provided to third parties because software dependencies are included within the
container. Examples of bioinformatics software are genome assemblers, read
binners and read aligners. Examples of container software are Docker, Rocket
and LXC/LXD. Standardising bioinformatics software in containers allows
interchangeable use between different research groups and institutions.

Applications of this standardisation are:

  * A developer uploads his short read aligner as a container to an online
    repository for others to use. A biologists downloads this aligner and is
    able to use it immediately as it follows a standardised interface that the
    biologist is already familiar with.
  * A genome assembly benchmarking service downloads many genome assembler
    containers. These containers are evaluated using assembly performance
    metrics. The standardised interface allows all containers to be benchmarked
    the same way.
  * A large sequencing centre invests time to develop an improved genome
    assembly pipeline for single cell data. The pipeline is packaged inside a
    Linux container and shared with the bioinformatics community. Another large
    sequencing centre is able to immediately compare this new pipeline with
    their in-house pipeline using the same container interface.

### Notational Conventions

* The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
  “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
  interpreted as described in [RFC2119].

* PAIRED: Paired reads are defined as the organisation of a FASTA or FASTQ file
  where the Nth and Nth+1 reads originate from opposite ends of the same DNA
  fragment, where N % 2 == 0 using 0-based indexing.

## Generic bioinformatics container

This specification describes the required inputs for all containerised
bioinformatics software, independent of the application type.

### Inputs

* **TASK**: The argument given to start a container MUST be a single string
  containing only the characters A-Z, a-z, 0-9, '_' and '-'. This argument is
  used to differentiate different combination of settings the containerised
  software can be run as. Every container SHOULD support a 'default' task. This
  runs the container in a mode that is applicable to the most common situation
  in which the software is used.

### Outputs

The containerised software MUST return a zero exit code when completing
successfully, and return a non-zero exit code when an error occurs.

## Databases

This section describes the variables containing the paths to various databases.

### Variables

* **CONT_DATABASES_DIR**: This variable specifies the absolute path to a [directory](databases_structure.txt) that contains the following databases:
   * COG
   * NCBI Genomes
   * Refseq
   * BLAST DBs

## Short-read genome assembler container

This specification describes the interface for containerised short-read genome
assemblers. A genome assembler converts one or more FASTQ files of DNA short
reads into larger contiguous ('contigs') regions of DNA. In addition to the
specifications described below, this container MUST implement the
specifications defined in 'Generic bioinformatics container'.

### Inputs

* **CONT_FASTQ_FILE_LISTING**: This variable MAY be present in the container
  environment. If used this variable MUST specify the absolute path, inside the
  container, of a text file. This file MUST contain a list of absolute paths,
  or paths relative to this file of gzipped FASTQ files. Only one FASTQ file
  path MUST appear per line. These files MUST contain FASTQ reads.

* **CONT_PAIRED_FASTQ_FILE_LISTING**: This variable MAY be present in the
  container environment. If used this variable MUST specify the absolute path,
  inside the container, of a text file. This file MUST contain a list of
  absolute paths, or paths relative to this file of gzipped PAIRED FASTQ files.
  Only one FASTQ file path MUST appear per line. These files MUST contain
  PAIRED FASTQ reads.

* **CONT_CONTIGS_FILE**: This variable MUST be present in the container
  environment. This specifies the absolute path of where the file containing
  the generated contig sequences MUST be created. The created contigs file MUST
  be in FASTA format.

**Note!** At least one of the variables **CONT_FASTQ_FILE_LISTING**,
**CONT_PAIRED_FASTQ_FILE_LISTING** MUST be present in the container
environment. Only one or both of these variables may be used. The container
should decide which action to take and how to use the data to use based on the
availability of these variables in the environment.

### Outputs

The container MUST generate a FASTA file of contigs in the location
**$CONT_CONTIGS_FILE**.

## Reference-based genome assembly benchmarking container

This specification describes the interface for containerised software to
evaluate a genome assembly in FASTQ format using a reference genome sequence in
FASTQ format. Genome assemblers vary in efficacy and the quality of an assembly
may be evaluated by comparing it to a higher quality reference of the same
genome. In addition to the specifications described below, this container MUST
implement all specifications defined in 'Generic bioinformatics container'.

### Inputs

* **CONT_CONTIGS_FILE**: This variable MUST be present in the container
  environment. This specifies the absolute path of where the file containing
  the genome assembly contigs can be found. The contigs file MUST be in FASTA
  format.

* **CONT_REFERENCE_FILE**: This variable MUST be present in the container
  environment. This variable MUST specify the absolute path of the file
  containing a FASTA formatted reference sequence from the same origin as the
  **CONTIGS_FILE** contigs.

* **CONT_OUTPUT_DIR**: This variable MUST be present in the container
  environment. This variable specifies the absolute path of where the directories/files MUST
  be created containing the metrics describing the reference genome assembly.

### Outputs

The container MUST generate files of metrics in the directory **$CONT_OUTPUT_DIR**
from evaluating the quality of the assembly in the file **$CONT_CONTIGS_FILE**
using the reference sequence in the file **$CONT_REFERENCE_FILE**.

## Binning container

This specification describes the interface for containerised binning applications. 
A binning application groups reads or contigs and/or assigns them to operational taxonomic units.
In addition to the specifications described below, this container MUST implement the
specifications defined in 'Generic bioinformatics container'. 
Furthermore all variables from the 'Database' section will be available.

### Inputs

* **CONT_FASTQ_FILE_LISTING**: This variable MAY be present in the container
  environment. If used this variable MUST specify the absolute path, inside the
  container, of a text file. This file MUST contain a list of absolute paths,
  or paths relative to this file of gzipped FASTQ files. Only one FASTQ file
  path MUST appear per line. These files MUST contain FASTQ reads.

* **CONT_PAIRED_FASTQ_FILE_LISTING**: This variable MAY be present in the
  container environment. If used this variable MUST specify the absolute path,
  inside the container, of a text file. This file MUST contain a list of
  absolute paths, or paths relative to this file of gzipped PAIRED FASTQ files.
  Only one FASTQ file path MUST appear per line. These files MUST contain
  PAIRED FASTQ reads.

* **CONT_CONTIGS_FILE_LISTING**: This variable MAY be present in the container
  environment. If used this variable MUST specify the absolute path, inside the
  container, of a text file. This file MUST contain a list of absolute paths,
  or paths relative to this file of FASTA files. Only one FASTA file path MUST
  appear per line. These files MUST contain FASTA contigs.

* **CONT_BINNING_FILE**: This variable MUST be present in the container
  environment. This specifies the absolute path of where the file containing
  the computed binning and/or taxonomic groups MUST be created. The created
  file MUST be in [BINNING format](https://github.com/michaelbarton/bioinformatics-container-rfc/blob/binning_profiling_formats/binning_spec.mkd#the-binning-output-format).

**Note!** At least one of the variables **CONT_FASTQ_FILE_LISTING**,
**CONT_PAIRED_FASTQ_FILE_LISTING**, or **CONT_CONTIGS_FILE_LISTING** MUST be
present in the container environment. One or more of these variables may be
used. The container should decide which action to take and how to use the data
to use based on the availability of these variables in the environment.


### Outputs

The container MUST generate a the binning file in the location **$CONT_BINNING_FILE**.

## Profiling container

This specification describes the interface for containerised profiling applications. 
A profiling application gives an insight into the composition of the microbial community by 
assigning percentage values to taxonomic identifiers.
In addition to the specifications described below, this container MUST implement the
specifications defined in 'Generic bioinformatics container'. 
Furthermore all variables from the 'Database' section will be available.

### Inputs

* **CONT_FASTQ_FILE_LISTING**: This variable MAY be present in the container
  environment. If used this variable MUST specify the absolute path, inside the
  container, of a text file. This file MUST contain a list of absolute paths,
  or paths relative to this file of gzipped FASTQ files. Only one FASTQ file
  path MUST appear per line. These files MUST contain FASTQ reads.

* **CONT_PAIRED_FASTQ_FILE_LISTING**: This variable MAY be present in the
  container environment. If used this variable MUST specify the absolute path,
  inside the container, of a text file. This file MUST contain a list of
  absolute paths, or paths relative to this file of gzipped PAIRED FASTQ files.
  Only one FASTQ file path MUST appear per line. These files MUST contain
  PAIRED FASTQ reads.

* **CONT_CONTIGS_FILE_LISTING**: This variable MAY be present in the container
  environment. If used this variable MUST specify the absolute path, inside the
  container, of a text file. This file MUST contain a list of absolute paths,
  or paths relative to this file of FASTA files. Only one FASTA file path MUST
  appear per line. These files MUST contain FASTA contigs.

* **CONT_PROFILING_FILE**: This variable MUST be present in the container
  environment. This specifies the absolute path of where the file containing
  the computed profiling and/or taxonomic groups MUST be created. The created
  file MUST be in [PROFILING format](https://github.com/michaelbarton/bioinformatics-container-rfc/blob/binning_profiling_formats/profiling_spec.mkd#the-profiling-output-format).

**Note!** At least one of the variables **CONT_FASTQ_FILE_LISTING**,
**CONT_PAIRED_FASTQ_FILE_LISTING**, or **CONT_CONTIGS_FILE_LISTING** MUST be
present in the container environment. One or more of these variables may be
used. The container should decide which action to take and how to use the data
to use based on the availability of these variables in the environment.

### Outputs

The container MUST generate a the binning file in the location **$CONT_PROFILING_FILE**.

## Normative References

* [RFC2119]	Bradner, S., “Key words for use in RFCs to Indicate Requirement
  Levels”, BCP 14, RFC 2119, March 1997.

# Authors's Addresses

* Michael Barton <mail@michaelbarton.me.uk>
* Peter Belmann <pbelmann@cebitec.uni-bielefeld.de>
* Andreas Bremges <abremges@cebitec.uni-bielefeld.de>
* Johannes Dröge <johannes.droege@uni-duesseldorf.de>
* Alexander Sczyrba <asczyrba@cebitec.uni-bielefeld.de>
